import{n as I,A as S,B as w,C as F}from"../app.086b26ad.js";var E={exports:{}};(function(t,k){(function(M,p){t.exports=p()})(I,function(){function M(r,a){try{BMap}catch{throw Error("Baidu Map JS API is not ready yet!")}var i=p(r),n=new BMap.Polyline(i,a);return n.addEventListener("lineupdate",function(){this.isEditing&&this.enableEditing()}),n.cornerPoints=r,n.editMarkers=[],n.enableEditing=function(){var e=this;if(e.map){e.disableEditing();for(var s=0;s<e.cornerPoints.length;s++){var d=new BMap.Marker(e.cornerPoints[s],{icon:new BMap.Icon("http://api.map.baidu.com/library/CurveLine/1.5/src/circle.png",new BMap.Size(16,16)),enableDragging:!0,raiseOnDrag:!0});d.addEventListener("dragend",function(){e.cornerPoints.length=0;for(var u=0;u<e.editMarkers.length;u++)e.cornerPoints.push(e.editMarkers[u].getPosition());var h=p(e.cornerPoints);e.setPath(h)}),d.index=s,e.editMarkers.push(d),e.map.addOverlay(d)}}e.isEditing=!0},n.disableEditing=function(){this.isEditing=!1;for(var e=0;e<this.editMarkers.length;e++)this.map.removeOverlay(this.editMarkers[e]),this.editMarkers[e]=null;this.editMarkers.length=0},n.getPath=function(){return i},n}function p(r){for(var a=[],i=0;i<r.length-1;i++){var n=m(r[i],r[i+1]);n&&n.length>0&&(a=a.concat(n))}return a}function m(r,a){var i=[];if(!r||!a||!(r instanceof BMap.Point)||!(a instanceof BMap.Point))return null;var n=function(c){return 1-2*c+c*c},e=function(c){return 2*c-2*c*c},s=function(c){return c*c},d=30,u,h,P,C,b,v,B=0,g=0;if(typeof a=="undefined"){typeof i!="undefined"&&(i=[]);return}var f=parseFloat(r.lat),y=parseFloat(a.lat),o=parseFloat(r.lng),l=parseFloat(a.lng);for(l>o&&parseFloat(l-o)>180&&o<0&&(o=parseFloat(180+180+o)),o>l&&parseFloat(o-l)>180&&l<0&&(l=parseFloat(180+180+l)),v=0,y==f?(u=0,h=o-l):l==o?(u=Math.PI/2,h=f-y):(u=Math.atan((y-f)/(l-o)),h=(y-f)/Math.sin(u)),v==0&&(v=u+Math.PI/5),P=h/2,b=P*Math.cos(v)+o,C=P*Math.sin(v)+f,B=0;B<d+1;B++)i.push(new BMap.Point(o*n(g)+b*e(g)+l*s(g),f*n(g)+C*e(g)+y*s(g))),g=g+1/d;return i}return M})})(E);var O=E.exports;const L=["click","dblclick","mousedown","mouseup","mouseout","mouseover","remove","lineupdate"],W={name:"bml-curve-line",render(){},mixins:[S("overlay")],props:{points:{type:Array,default:Array},strokeColor:{type:String},strokeWeight:{type:Number},strokeOpacity:{type:Number},strokeStyle:{type:String},massClear:{type:Boolean,default:!0},clicking:{type:Boolean,default:!0},editing:{type:Boolean,default:!1}},watch:{points:{handler(t,k){this.originInstance.disableEditing(),this.reload()},deep:!0},strokeColor(t){this.originInstance.setStrokeColor(t)},strokeOpacity(t){this.originInstance.setStrokeOpacity(t)},strokeWeight(t){this.originInstance.setStrokeWeight(t)},strokeStyle(t){this.originInstance.setStrokeStyle(t)},editing(t){t?this.originInstance.enableEditing():this.originInstance.disableEditing()},massClear(t){t?this.originInstance.enableMassClear():this.originInstance.disableMassClear()},clicking(t){this.reload()}},methods:{load(){const{BMap:t,map:k,points:M,strokeColor:p,strokeWeight:m,strokeOpacity:r,strokeStyle:a,editing:i,massClear:n,clicking:e}=this,s=new O(M.map(d=>w(t,d)),{strokeColor:p,strokeWeight:m,strokeOpacity:r,strokeStyle:a,enableMassClear:n,enableClicking:e});i?s.enableEditing():s.disableEditing(),this.originInstance=s,k.addOverlay(s),F.call(this,s,L)}}};export{W as default};
